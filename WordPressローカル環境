# WordPressをローカルで動かすための環境設定

// Local（Local by Flywheel）をダウンロード
https://localwp.com

// Localをインストール
画面の指示に従いサーバーのPHPやApacheの選択、WordPressのID/PWの設定などを行う。

// 参考：Localをアンインストール
https://localwp.com/help-docs/troubleshooting/how-do-i-uninstall-local-by-flywheel-on-macos/
/private/etc/hosts

# WordPress管理画面の設定

// 管理画面URL
http://understrap.local/wp-admin/

// ダミーデータをダウンロード
ダミーテータのファイル
https://github.com/jawordpressorg/theme-test-data-ja
xmlファイルをローカルにダウンロードし以下のプラグインでインポート。

// ダミーデータをインポート
WordPress管理画面 -> ツール -> インポート -> WordPressのプラグインをインストールし、ダミーデータのxmlファイルを選択してインポート。

// 表記を日本語にする
設定 -> 一般の項目を変更する。
「サイトの言語」を日本語、「タイムゾーン」を東京、「日付形式」をカスタムのY/n/j、「時刻形式」をg:i Aに変更。

// WordPress アドレス (URL)を変更
http://understrap.local/blog

// ルートのindex.php
以下のパス部分に/blogを追加
require __DIR__ . '/blog/wp-blog-header.php';

// blogディレクトリにファイルを移動
index.php以外をblogディレクトリに移動

// blogディレクトリにもindex.phpをコピー
index.phpが無いとエラーが出る。
「Warning: fileperms(): stat failed for /Users/<username>/Documents/WordPress_local/app/public/blog/index.php in /Users/<username>/Documents/WordPress_local/app/public/blog/wp-admin/includes/file.php on line 1961」

require __DIR__ . '/blog/wp-blog-header.php'; 部分の/blogを削除したindex.phpを/blog/に配置。

http://understrap.local/やhttp://understrap.local/blog/wp-admin/にアクセスできれば成功。

// Localの管理画面でのSSL化
Localの管理画面のSSLのTRUSTをクリックしPWを入力。しばらくするとTRUSTEDになっていれば成功

// WordPressの管理画面でURLを変更する
WordPress アドレス (URL)とサイトアドレス (URL)の部分をhttps://に

// キーチェーンの証明書を変更する
証明書のエラーが出るので、キーチェーンアクセスで証明書を信頼するに変更する
https://localwp.com/help-docs/ssl/managing-local-sites-ssl-certificate-in-macos/

# テーマの設定（understrap）
themesディレクトリにファイルをコピー
uploadsディレクトリにファイルをコピー

// 外観 -> カスタマイズ -> 基本情報
ロゴ
/understrap/inc/_custom-wp.phpのSVGアップロードを有効にするとロゴのSVGをアップロード可能に

サイトタイトル
KEN-G.COM

キャッチフレーズ
ken-g.comは、日常の話題や好きなもの「デザイン、Apple製品、映画、海外ドラマ、音楽、自転車」をメインに、実際に体験して良かったものを記事にしています。

// 外観 -> カスタマイズ -> テーマレイアウト設定
サイドバーなし

// 外観 -> カスタマイズ -> メニュー
全ての位置を表示でヘッダーのメニューを有効に


# gulpやbrowsersyncを動かす設定

// Homebrewをインストール
https://brew.sh/index_ja
ターミナルで以下を実行
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

// Homebrewのパスを通す
Next stepsのechoの部分を実行してパスを通す。
以下を実行してバージョンが表示されれば完了。
$ brew --version

// Homebrewでnodebrewをインストール
$ brew install nodebrew
バージョンを確認。
$ .nodebrew -v

// Node.jsをインストール
インストールできるバージョンを表示。
%　nodebrew ls-remote

※ M1 Mac対応版はv16.0.0
nodebrew install-binary v16.0.0

最新版をインストール
$ nodebrew install-binary latest

安定版をインストール
$ nodebrew install-binary stable

※ エラー Warning: No such file or directory
解決するためにディレクトリを作成する
$ mkdir -p ~/.nodebrew/src

// インストールされたnode有効化
$ nodebrew lsを実行すると
v16.0.0
current: none
となっているので以下で有効化する

$ nodebrew use v16.0.0

// nodeが使えるように環境パスを通す
$ echo 'export PATH=$HOME/.nodebrew/current/bin:$PATH' >> ~/.zprofile

ターミナル.appの再起動で以下のコマンドを実行して確認。
$ node -v
バージョンが表示されればインストール完了

// gulpのインストール（ローカルのみにインストール）
https://qiita.com/ARTCreativeFactory/items/0af8cb8c6deb4954e09d

cdでunderstrapのフォルダーに移動。
understrapデフォルトのpackage.jsonを削除して新しくpackage.jsonを生成する。
$ npm init -y

gulpをインストール
$ npm install --save-dev gulp

gulpのバージョン確認
$ npx gulp -v
CLI version: 2.3.0
Local version: 4.0.2

sass, gulp-sassをインストールする
$ npm install -D sass gulp-sass

他の関連パッケージもインストールする(gulpfile.js内でrequire()に書かれているパッケージ)
$ npm install --save-dev gulp-plumber gulp-babel gulp-postcss gulp-rename gulp-concat gulp-uglify gulp-sourcemaps browser-sync del gulp-clean-css autoprefixer

最新版は8.0.0だがエラーを吐くため7をインストール
$ npm install --save-dev gulp-imagemin@7

gulpfile.js内の
var sass = require( 'gulp-sass' );
を以下のように変更
var sass = require('gulp-sass')(require('sass'));

最後に以下を実行して完了
$ npm install

understrapのディレクトリで以下を実行してBrowser-Syncする。
中止するには「control + C」
$ npx gulp watch-bs

# Dart Sassのエラー
「/」を使った記述は非推奨のようでBootstrapの$spacer / 4のような記述はエラーが出る。
Sass deprecation warning: Using / for division is deprecated #34051
https://github.com/twbs/bootstrap/issues/34051

他のエラーが見えにくくなるので以下を実行（一時的な解決法）
//sass のパッケージ（1.34.0）をアンインストール
$ npm un sass 
 
//バージョン（1.32.12）を指定してインストール   
$ npm i -D sass@1.32.12

# browserSyncの設定

// 管理画面
localhost:3001

// URL
understrap/gulpconfig.json
以下の部分を開発環境のURLに合わせる
"proxy": "http://understrap.local",

// localhostのSSL化
SSL化は証明書の作成が必要なのでhttpで問題なし。
httpをURLで使うときはスラッシュで始まる記述をする。
<a href="//www.ken-g.com">テスト</a>
